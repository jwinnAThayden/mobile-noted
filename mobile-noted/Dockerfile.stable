# Stable Docker build for Android APK generation
FROM ubuntu:22.04

# Prevent interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Essential build tools
    git \
    curl \
    wget \
    unzip \
    zip \
    # Python environment
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    # Java for Android SDK (use Java 17 for compatibility)
    openjdk-17-jdk \
    # Build dependencies
    build-essential \
    gcc \
    g++ \
    libc6-dev \
    libffi-dev \
    libssl-dev \
    zlib1g-dev \
    # Android build dependencies
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    libncurses5-dev \
    libncursesw5-dev \
    xz-utils \
    tk-dev \
    # Autotools for libffi compilation
    autoconf \
    automake \
    autotools-dev \
    libtool \
    pkg-config \
    # Cleanup
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set Java environment for Android SDK compatibility
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV PATH=$JAVA_HOME/bin:$PATH

# Create a non-root user to avoid buildozer warnings
RUN useradd -m -s /bin/bash -u 1000 builder && \
    mkdir -p /app && \
    chown -R builder:builder /app

# Switch to non-root user
USER builder
WORKDIR /app

# Install buildozer and cython directly without virtual environment
# This avoids the --user install issues in virtualenv
RUN pip3 install --user buildozer cython

# Copy project files
COPY --chown=builder:builder . /app/

# Install project requirements if they exist
RUN if [ -f requirements.txt ]; then pip3 install --user -r requirements.txt; fi

# Set environment variables for buildozer
ENV PATH="/home/builder/.local/bin:$PATH"
ENV ANDROID_HOME="/app/.buildozer/android/platform/android-sdk"
ENV ANDROID_SDK_ROOT="/app/.buildozer/android/platform/android-sdk"

# Create comprehensive build script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "🚀 Starting Android APK build with Docker..."\n\
echo "📋 Environment:"\n\
echo "   Java: $(java -version 2>&1 | head -1)"\n\
echo "   Python: $(python3 --version)"\n\
echo "   Buildozer: $(buildozer --version)"\n\
echo "   User: $(whoami)"\n\
echo "   Working dir: $(pwd)"\n\
echo "   Available space: $(df -h . | tail -1 | awk '{print $4}')"\n\
echo ""\n\
\n\
# Clean any previous builds\n\
if [ -d ".buildozer" ]; then\n\
    echo "🧹 Cleaning previous build cache..."\n\
    rm -rf .buildozer\n\
fi\n\
\n\
if [ -d "bin" ]; then\n\
    echo "🧹 Cleaning previous APK files..."\n\
    rm -rf bin\n\
fi\n\
\n\
# Accept Android SDK licenses automatically\n\
export BUILDOZER_LOG_LEVEL=2\n\
\n\
echo "🏗️ Building Android APK (this may take 10-15 minutes)..."\n\
echo "⏰ Started at: $(date)"\n\
\n\
# Run buildozer with timeout protection\n\
timeout 30m buildozer android debug || {\n\
    echo "❌ Build timed out or failed"\n\
    echo "📝 Checking for partial build artifacts..."\n\
    if [ -d ".buildozer" ]; then\n\
        echo "   .buildozer directory exists - partial build occurred"\n\
        ls -la .buildozer/ || true\n\
    fi\n\
    exit 1\n\
}\n\
\n\
echo "⏰ Completed at: $(date)"\n\
echo ""\n\
\n\
# Verify build results\n\
if [ -d "bin" ] && [ -n "$(ls bin/*.apk 2>/dev/null)" ]; then\n\
    echo "✅ Build successful! APK files created:"\n\
    ls -la bin/*.apk\n\
    echo ""\n\
    echo "📱 APK details:"\n\
    for apk in bin/*.apk; do\n\
        echo "   $(basename \"$apk\"): $(du -h \"$apk\" | cut -f1)"\n\
    done\n\
    echo ""\n\
    \n\
    # Copy APKs to output directory if mounted\n\
    if [ -d "/output" ] && [ -w "/output" ]; then\n\
        echo "📋 Copying APKs to output directory..."\n\
        cp bin/*.apk /output/ 2>/dev/null || true\n\
        echo "✅ APKs copied to /output/"\n\
    fi\n\
    \n\
    echo "🎉 Android APK build completed successfully!"\n\
else\n\
    echo "❌ Build failed - no APK files found in bin/"\n\
    echo "📝 Checking build directory..."\n\
    ls -la . || true\n\
    echo "📝 Checking .buildozer logs..."\n\
    if [ -f ".buildozer/logs/build.log" ]; then\n\
        echo "Last 20 lines of build log:"\n\
        tail -20 .buildozer/logs/build.log || true\n\
    fi\n\
    exit 1\n\
fi\n\
' > /app/build.sh && chmod +x /app/build.sh

# Default command
CMD ["/app/build.sh"]